{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACE,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEJ,mCAAML,EAAMI,QAAQE,KAApB,OACD,kCAAKN,EAAMI,QAAQG,MAAnB,WCNSC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLfM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAClDG,SAAUF,MCwCDG,G,wDApCb,aAAc,IAAD,8BACf,gBAcEH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WACE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC7CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAElD,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACD,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAce,KAAKf,eAC1D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BVK,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.145d17b1.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n      <img\n      alt='monster'\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n    />\n     <h2> {props.monster.name} </h2>\n    <p> {props.monster.email} </p>\n    </div>\n);","import React from 'react'\nimport './card-list.styles.css'\nimport {Card } from '../card/card.component.jsx'\n\nexport const CardList = (props) => (\n    <div className='card-list'>\n      {\n        props.monsters.map(monster => (\n         <Card key={monster.id} monster={monster}/>)\n        )} \n    </div>\n  )\n\n ","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox =({placeholder, handleChange})=>(\n   <input className='search' type='search' placeholder={placeholder} \n      onChange={handleChange}\n    />\n)\n","import React,{Component} from 'react'\n\nimport {CardList} from './components/card-list/card-list.component';\n\nimport {SearchBox} from './components/search-box/search-box.component'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\nsuper();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    } \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e)=> {\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monters Rolodex </h1>\n       <SearchBox placeholder='search monters' handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonters} />\n         \n      </div>\n    ); \n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}